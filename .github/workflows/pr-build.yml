name: PR Build
on: pull_request
jobs:
  imagecompressor:
    # Only run on Pull Requests within the same repository, and not from forks.
    if: github.event.pull_request.head.repo.full_name == github.repository
    name: calibreapp/image-actions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Compress Images
        uses: calibreapp/image-actions@main
        with:
          # The `GITHUB_TOKEN` is automatically generated by GitHub and scoped only to the repository that is currently running the action. By default, the action canâ€™t update Pull Requests initiated from forked repositories.
          # See https://docs.github.com/en/actions/reference/authentication-in-a-workflow and https://help.github.com/en/articles/virtual-environments-for-github-actions#token-permissions
          githubToken: ${{ secrets.GITHUB_TOKEN }}
  matrixBuild:
    needs: imagecompressor
    name: "Build against Various Node & Hugo Versions"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [6, 8, 10]
        hugo: [0.76.5, 0.77.0, 0.78.2]
        include:
          - path: exampleSite
            url:  hugo-community-platform
          - path: singleGroupManyEventsSite
            url:  hugo-community-group
          - path: singleEventManyGroupsSite
            url:  hugo-community-conference-groups
          - path: singleGroupSingleEventSite
            url:  hugo-community-conference
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0
      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Setup Hugo ${{ matrix.hugo }}
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: ${{ matrix.hugo }}
          extended: true      
      - name: Build
        run: |
          pushd './exampleSite'
          hugo --minify --theme "hugo-community" --themesDir "../../" --baseURL "/"
          popd
  contentLinter:  
    runs-on: ubuntu-latest
    needs: matrixBuild
    name: "Run linting"
    strategy:
      matrix:
        include:
          - path: exampleSite
            url:  hugo-community-platform
          - path: singleGroupManyEventsSite
            url:  hugo-community-group
          - path: singleEventManyGroupsSite
            url:  hugo-community-conference-groups
          - path: singleGroupSingleEventSite
            url:  hugo-community-conference
    steps:
      ##########################
      # Checkout the code base #
      ##########################
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      ################################
      # Run Linter against code base #
      ################################
      - name: Lint ${{ matrix.path }} Content
        uses: github/super-linter@v3
        env:
          FILTER_REGEX_INCLUDE: ./${{ matrix.path }}/content/**
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}      
      
      ################################
      # Run Linter against code base #
      ################################
      - name: Lint exampleSite Archetypes Folder
        uses: github/super-linter@v3
        env:
          FILTER_REGEX_INCLUDE: ./archetypes/**
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  htmlproofer:
    needs: matrixBuild
    name: "Verify ${{ matrix.path }} HTML Output"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - path: exampleSite
            url:  hugo-community-platform
          - path: singleGroupManyEventsSite
            url:  hugo-community-group
          - path: singleEventManyGroupsSite
            url:  hugo-community-conference-groups
          - path: singleGroupSingleEventSite
            url:  hugo-community-conference
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
        with:
          submodules: true
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.79.0'
          extended: true
      - name: Wait for the Netlify Preview
        uses: jakepartusch/wait-for-netlify-action@v1
        id: netlify
        with:
          site_name: ${{ matrix.url }}
      - name: "Build Hugo"
        run: |
          pushd './${{ matrix.path }}'
          hugo --minify --theme "hugo-community" --themesDir "../../" --baseURL ${{ steps.netlify.outputs.url }}
          popd
      - name: "Check HTML Output"
        run: |
          pushd ./${{ matrix.path }}/public
          sudo gem install html-proofer
          htmlproofer -v
          htmlproofer --allow-hash-href --http-status-ignore "999" --url-ignore "/https://github.com/,/https://twitter.com/,https://fonts.googleapis.com"
  lighthouse:
    needs: matrixBuild
    name: "Lighthouse Eval"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - path: exampleSite
            url:  hugo-community-platform
          - path: singleGroupManyEventsSite
            url:  hugo-community-group
          - path: singleEventManyGroupsSite
            url:  hugo-community-conference-groups
          - path: singleGroupSingleEventSite
            url:  hugo-community-conference
    steps:
      - uses: actions/checkout@v2
      - name: Wait for ${{ matrix.url }} Preview
        uses: jakepartusch/wait-for-netlify-action@v1
        id: netlify
        with:
          site_name: ${{ matrix.url }}  
      - name: Use Node.js 10.x
        uses: actions/setup-node@v1
        with:
          node-version: 10.x
      - name: "Lighthouse ${{ matrix.url }} (Preview)"
        run: |
          npm install -g @lhci/cli@0.6.x
          lhci collect --urls ${{ steps.netlify.outputs.url }} --url ${{ steps.netlify.outputs.url }}/community/ --url ${{ steps.netlify.outputs.url }}/events/ --url ${{ steps.netlify.outputs.url }}/groups/ --url ${{ steps.netlify.outputs.url }}/speakers/ --url ${{ steps.netlify.outputs.url }}/topics/
          lhci upload --target "temporary-public-storage"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}